on:
  workflow_call:
    inputs:
      TARGET_IMAGE_NAME:
        required: true
        type: string
    secrets:
      REGISTRY_LOGIN_SERVER:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      AZURE_NPM_TOKEN:
        required: true
      AZURE_CREDENTIALS:
        required: true

env:
  APPINSIGHTS_ENABLE: false
  AUTH_ENABLE: false
  DBCONFIG_HOST: faro-db-dev-01.postgres.database.azure.com
  DBCONFIG_SSL_ENABLED: true
  DBCONFIG_SSL_REJECTUNAUTHORIZED: true
  PORT: 8080

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Azure DevOps NPM
        uses: Faro-Health/github-actions/azure-devops-npm@master
        with:
          organization: farohealth
          registry: faro-common-libs
          password: ${{ secrets.AZURE_NPM_TOKEN }}
      - name: Authenticate to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set variables
        id: set_vars
        run: |
          if [ ${{ github.ref }} == 'refs/heads/release/*' ]; then
            echo "DBCONFIG_DATABASE=faro_db_rc_devops" >> $GITHUB_ENV
            (echo -n 'DBCONFIG_USER='; az keyvault secret show --vault-name faro-dev-vault-01 --name devops-rc-db-username --query "value" | sed 's/"//g') >> $GITHUB_ENV
            (echo -n 'DBCONFIG_PASSWORD='; az keyvault secret show --vault-name faro-dev-vault-01 --name devops-rc-db-password --query "value" | sed 's/"//g') >> $GITHUB_ENV
          else
            echo "DBCONFIG_DATABASE=faro_db_devops" >> $GITHUB_ENV
            (echo -n 'DBCONFIG_USER='; az keyvault secret show --vault-name faro-dev-vault-01 --name devops-db-username --query "value" | sed 's/"//g') >> $GITHUB_ENV
            (echo -n 'DBCONFIG_PASSWORD='; az keyvault secret show --vault-name faro-dev-vault-01 --name devops-db-password --query "value" | sed 's/"//g') >> $GITHUB_ENV
          fi
      - run: npm ci
      - run: npm run lint
      - run: npm run build
      - run: npm run coverage:ci
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: test-output/test-results.xml
      - name: Publish Cobertura coverage results
        uses: 5monkeys/cobertura-action@master
        if: ${{ github.event_name != 'workflow_dispatch' }}
        with:
          path: coverage-report/cobertura-coverage.xml
          report_name: Code Coverage
          show_line: true
          fail_below_threshold: false
          minimum_coverage: 50
      - name: git set your account's default identity.
        run: |
          git config --global user.email "ci.build@farohealth.com"
          git config --global user.name "CI Build"
      - run: npm run prerelease:version
      - run: git pull --ff --no-edit && git push
      - run: npm publish
      - name: set $VERSION
        run: |
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        id: test
      - name: show new version
        run: |
          echo ${{ env.VERSION }}
      - name: 'Connect to docker registry'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: 'Build and push docker image'
        run: |
          cp ~/.npmrc `pwd`/docker/.npmrc
          docker build ./docker -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ inputs.TARGET_IMAGE_NAME }}:${{ env.VERSION }} -t  ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ inputs.TARGET_IMAGE_NAME }}:latest
          docker push -a ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ inputs.TARGET_IMAGE_NAME }}
      #      - name: Deploy to Azure Web App for Container to RC'
      #        if: github.ref == 'refs/heads/release/*'
      #        uses: azure/webapps-deploy@v2
      #        with:
      #          app-name: faro-rc-user-management-app-01
      #          images: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ inputs.TARGET_IMAGE_NAME }}:${{ env.VERSION }}
      - name: Deploy to Azure Web App for Container to CI'
        if: github.ref == 'refs/heads/develop'
        uses: azure/webapps-deploy@v2
        with:
          app-name: faro-ci-user-management-app-01
          images: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ inputs.TARGET_IMAGE_NAME }}:${{ env.VERSION }}
#  notify-slack:
#    runs-on: ubuntu-latest
#    if: success() || failure()
#    needs: [build]
#    steps:
#      - name: Notify slack
#        uses: Faro-Health/github-actions/notify-slack@master
#        with:
#          conclusion: ${{ needs.build.result }}
#          slackWebHookUrl: ${{ secrets.SLACK_WEBHOOK_URL }}

